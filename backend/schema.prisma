// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model CheckListItem {
  id                                   String              @id @default(uuid()) @postgresql.Uuid
  title                                String              @default("")
  titleNL                              String              @default("")
  checked                              Boolean             @default(false)
  amount                               Int?
  description                          String              @default("")
  descriptionNL                        String              @default("")
  publishDate                          DateTime?           @default(now())
  tags                                 Tag[]               @relation("CheckListItem_tags")
  image                                CheckListItemImage? @relation("CheckListItem_image", fields: [imageId], references: [id])
  imageId                              String?             @unique @map("image") @postgresql.Uuid
  from_UserChecklistItem_checkListItem UserChecklistItem[] @relation("UserChecklistItem_checkListItem")
}

model CheckListItemImage {
  id            String         @id @default(uuid()) @postgresql.Uuid
  image         Json?
  altText       String         @default("")
  checkListItem CheckListItem? @relation("CheckListItem_image")
}

model Experience {
  id             String        @id @default(uuid()) @postgresql.Uuid
  title          String        @default("")
  titleNL        String        @default("")
  status         String?       @default("draft")
  summary        String        @default("")
  summaryNL      String        @default("")
  content        Json          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  contentNL      Json          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate    DateTime?     @default(now())
  from           DateTime      @postgresql.Date
  to             DateTime?     @postgresql.Date
  ongoing        Boolean       @default(false)
  author         User?         @relation("Experience_author", fields: [authorId], references: [id])
  authorId       String?       @map("author") @postgresql.Uuid
  tags           Tag[]         @relation("Experience_tags")
  organisation   Organisation? @relation("Experience_organisation", fields: [organisationId], references: [id])
  organisationId String?       @map("organisation") @postgresql.Uuid

  @@index([authorId])
  @@index([organisationId])
}

model Height {
  id               String    @id @default(uuid()) @postgresql.Uuid
  cm               Int?
  createdAt        DateTime? @default(now())
  from_User_height User[]    @relation("User_height")
}

model Organisation {
  id          String       @id @default(uuid()) @postgresql.Uuid
  name        String       @default("")
  nameNL      String       @default("")
  experiences Experience[] @relation("Experience_organisation")
  logo        String       @default("")
}

model Post {
  id          String    @id @default(uuid()) @postgresql.Uuid
  title       String    @default("")
  slug        String    @unique @default("")
  status      String?   @default("draft")
  content     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?   @map("author") @postgresql.Uuid
  tags        Tag[]     @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id             String          @id @default(uuid()) @postgresql.Uuid
  name           String          @default("")
  nameNL         String          @default("")
  posts          Post[]          @relation("Post_tags")
  experiences    Experience[]    @relation("Experience_tags")
  checkListItems CheckListItem[] @relation("CheckListItem_tags")
}

model User {
  id             String              @id @default(uuid()) @postgresql.Uuid
  name           String              @default("")
  email          String              @unique @default("")
  password       String
  posts          Post[]              @relation("Post_author")
  experiences    Experience[]        @relation("Experience_author")
  checkListItems UserChecklistItem[] @relation("UserChecklistItem_user")
  birthdate      DateTime?           @postgresql.Date
  height         Height[]            @relation("User_height")
  weight         Weight[]            @relation("User_weight")
}

model UserChecklistItem {
  id              String         @id @default(uuid()) @postgresql.Uuid
  checkListItem   CheckListItem? @relation("UserChecklistItem_checkListItem", fields: [checkListItemId], references: [id])
  checkListItemId String?        @map("checkListItem") @postgresql.Uuid
  checked         Boolean        @default(false)
  count           Int?
  user            User?          @relation("UserChecklistItem_user", fields: [userId], references: [id])
  userId          String?        @map("user") @postgresql.Uuid

  @@index([checkListItemId])
  @@index([userId])
}

model Weight {
  id               String    @id @default(uuid()) @postgresql.Uuid
  g                Int?
  createdAt        DateTime? @default(now())
  from_User_weight User[]    @relation("User_weight")
}

// -----------------------------------------------------------------------------
// MIXINS
// SCSS mixins to quickly calculate & add SCSS.
// -----------------------------------------------------------------------------
@use "functions" as *;
@use "variables" as *;

// -----------------------------------------------------------------------------
// Media queries and breakpoints
// -----------------------------------------------------------------------------
// Breakpoint mixin
@mixin breakpoint($bp, $type: min) {
  @if map_has_key($breakpoints, $bp) {
    $bp: map_get($breakpoints, $bp);
    @if $type == max {
      $bp: $bp - 1;
    }
    @media only screen and (#{$type}-width: #{$bp}px) {
      @content;
    }
  }
  // Informative error handling when invalid $width value is provided
  @else {
    @warn 'There is no item "#{$bp}" in this list; choose one of: #{map-keys($breakpoints)}';
  }
}

// Hover, focus, active styling
@mixin hoverFocusActiveStyling($property, $value, $hoverValue, $focusValue, $child: null) {
  @if $child {
    // pure hover
    &:hover {
      @media (any-hover: hover) {
        #{$child} {
          #{$property}: $hoverValue;
        }
      }
    }
    // pure focus for non-supporting browsers of :focus-visible (Safari)
    &:focus:not(:hover) {
      #{$child} {
        #{$property}: $focusValue;
      }
    }
    // overwrite of focus to initial values for browsers that support :focus-visible
    &:focus:not(:focus-visible):not(:hover) {
      #{$child} {
        #{$property}: $value;
      }
    }
    // show focus styles on keyboard focus
    &:focus-visible:not(:hover) {
      #{$child} {
        #{$property}: $focusValue;
      }
    }
    // active state
    &:active {
      #{$child} {
        #{$property}: $hoverValue;
      }
    }
  } @else {
    &:hover {
      @media (any-hover: hover) {
        #{$property}: $hoverValue;
      }
    }
    // pure focus for non-supporting browsers of :focus-visible (Safari)
    &:focus:not(:hover) {
      #{$property}: $focusValue;
    }
    // overwrite of focus to initial values for browsers that support :focus-visible
    &:focus:not(:focus-visible):not(:hover) {
      #{$property}: $value;
    }
    // show focus styles on keyboard focus
    &:focus-visible:not(:hover) {
      #{$property}: $focusValue;
    }
    // active state
    &:active {
      #{$property}: $hoverValue;
    }
  }
}

// -----------------------------------------------------------------------------
// Theme
// -----------------------------------------------------------------------------
@mixin theme($name: null, $module: true) {
  @if $module {
    @if $name == "dark" {
      :global(.dark-mode) & {
        @content;
      }
    } @else if $name == "light" {
      :global(.light-mode) & {
        @content;
      }
    } @else {
      @warn 'There is no item "#{$name}" in this list; choose "light" or "dark"';
    }
  } @else {
    @if $name == "dark" {
      [data-theme="dark"] & {
        @content;
      }
    } @else if $name == "light" {
      .light-mode & {
        @content;
      }
    } @else {
      @warn 'There is no item "#{$name}" in this list; choose "light" or "dark"';
    }
  }
}

@mixin applyShadow($theme: "light") {
  --shadowColorRgb: 182, 169, 47;
  @if $theme == "dark" {
    --shadowColorRgb: 30, 41, 34;
  }
  --shadow-elevation-low: 0.3px 0.5px 0.7px rgba(var(--shadowColorRgb), 0.34),
    0.4px 0.8px 1px -1.2px rgba(var(--shadowColorRgb), 0.34), 1px 2px 2.5px -2.5px rgba(var(--shadowColorRgb), 0.34);
  --shadow-elevation-medium: 0.3px 0.5px 0.7px rgba(var(--shadowColorRgb), 0.36),
    0.8px 1.6px 2px -0.8px rgba(var(--shadowColorRgb), 0.36), 2.1px 4.1px 5.2px -1.7px rgba(var(--shadowColorRgb), 0.36),
    5px 10px 12.6px -2.5px rgba(var(--shadowColorRgb), 0.36);
  --shadow-elevation-high: 0.3px 0.5px 0.7px rgba(var(--shadowColorRgb), 0.34),
    1.5px 2.9px 3.7px -0.4px rgba(var(--shadowColorRgb), 0.34),
    2.7px 5.4px 6.8px -0.7px rgba(var(--shadowColorRgb), 0.34),
    4.5px 8.9px 11.2px -1.1px rgba(var(--shadowColorRgb), 0.34),
    7.1px 14.3px 18px -1.4px rgba(var(--shadowColorRgb), 0.34),
    11.2px 22.3px 28.1px -1.8px rgba(var(--shadowColorRgb), 0.34),
    17px 33.9px 42.7px -2.1px rgba(var(--shadowColorRgb), 0.34),
    25px 50px 62.9px -2.5px rgba(var(--shadowColorRgb), 0.34);
}

// -----------------------------------------------------------------------------
// Getting CSS to treat line-height like leading
// Via: https://css-tricks.com/how-to-tame-line-height-in-css/
// -----------------------------------------------------------------------------

@mixin basekick(
  $typeSizeModifier,
  $typeRowSpan,
  $descenderHeightScale,
  $capHeight,
  $baseFontSize: 16px,
  $gridRowHeight: 4
) {
  $fontSize: $typeSizeModifier * $baseFontSize;
  $lineHeight: $typeRowSpan * $gridRowHeight;
  $typeOffset: calculateTypeOffset($lineHeight, $fontSize, $descenderHeightScale);
  $topSpace: $lineHeight - $capHeight * $fontSize;
  $heightCorrection: 0;

  @if $topSpace > $gridRowHeight {
    $heightCorrection: $topSpace - ($topSpace % $gridRowHeight);
  }

  $preventCollapse: 1;

  font-size: #{$fontSize}px;
  line-height: #{$lineHeight}px;
  transform: translateY(#{$typeOffset}em);
  padding-top: $preventCollapse;

  &::before {
    content: "";
    margin-top: #{-($heightCorrection + $preventCollapse)}px;
    display: block;
    height: 0;
  }
}

@mixin EstherFont($typeSizeModifier, $typeRowSpan) {
  $fontDescenderHeightScale: 0.11;
  $fontCapHeight: 0.75;

  @include basekick(
    $typeSizeModifier,
    $typeRowSpan,
    $descenderHeightScale: $fontDescenderHeightScale,
    $capHeight: $fontCapHeight
  );
  font-family: var(--headingfont);
}
